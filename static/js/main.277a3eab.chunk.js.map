{"version":3,"sources":["components/Main/UserSection/user-api/UserAPI.ts","components/Main/UserSection/user-api/mockUserAPI.ts","components/Main/UserSection/UserProfile/UserProfile.sc.ts","components/Main/UserSection/UserProfile/UserProfile.tsx","components/Main/Main.sc.tsx","components/Main/UserSection/UserSection.tsx","components/Main/StatsSection/stats-api/StatsAPI.ts","components/Main/StatsSection/stats-api/mockStatsAPI.ts","components/Main/StatsSection/Stats/Stats.sc.ts","components/Main/StatsSection/Stats/Stats.tsx","components/Main/StatsSection/StatsSection.tsx","components/Main/FriendsSection/friends-api/FriendsAPI.ts","components/Main/FriendsSection/friends-api/mockFriendsAPI.ts","components/Main/FriendsSection/Friends/Friends.sc.tsx","components/Main/FriendsSection/Friends/Friends.tsx","components/Main/FriendsSection/FriendsSection.tsx","components/Main/TransactionsSection/transactions-api/TransactionsAPI.ts","components/Main/TransactionsSection/transactions-api/mockTransactionsAPI.ts","components/Main/TransactionsSection/Transactions/Transactions.sc.ts","components/Main/TransactionsSection/Transactions/Transactions.tsx","components/Main/TransactionsSection/TransactionsSection.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["axiosInstance","axios","create","MockAdapter","onGet","reply","user","userAPI","constructor","httpClient","data","this","get","Profile","styled","div","Description","Avatar","img","Name","p","Tag","Location","StatsList","ul","StatsItem","li","Label","span","Quantity","UserProfile","name","tag","location","avatar","stats","followers","views","likes","src","alt","MainHeading","h1","MainSection","section","Main","main","MainSectionHeading","h2","MainSectionContent","bg","UserSection","setUser","useState","useEffect","async","userData","getRandomUser","mockStatsAPI","statsAPI","Wrapper","Heading","List","Item","Math","floor","random","toString","Value","Stats","title","map","id","label","percentage","key","StatsSection","setStats","statsList","getStats","friends","mockFriendsAPI","friendsAPI","Status","isOnline","Friends","FriendsSection","setFriends","friendsList","getFriends","transactions","mockTransactionsAPI","transactionsAPI","Table","table","Transactions","items","type","amount","currency","TransactionsSection","setTransactions","transactionsList","getTransactions","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.277a3eab.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { mockUserAPI } from './mockUserAPI';\n\nexport type User = {\n    name: string;\n    tag: string;\n    location: string;\n    avatar: string;\n    stats: {\n        followers: number;\n        views: number;\n        likes: number;\n    };\n};\n\nexport class UserAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getRandomUser(): Promise<User> {\n        const {\n            data: { user },\n        } = await this.httpClient.get('/randomUser');\n\n        return user;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nmockUserAPI(axiosInstance);\n\nexport const userAPI = new UserAPI(axiosInstance);\n","import { AxiosInstance } from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport user from './stub-user.json';\n\nexport const mockUserAPI = (axiosInstance: AxiosInstance): void => {\n    const mockAdapter = new MockAdapter(axiosInstance);\n\n    mockAdapter.onGet('/randomUser').reply(200, { user });\n};\n","import styled from 'styled-components';\n\nexport const Profile = styled.div`\n    --color-big-stone: #122236;\n    --color-regent-gray: #82909e;\n    --color-mystic: #e4e9f0;\n\n    display: flex;\n    flex-direction: column;\n    width: 250px;\n    height: 330px;\n    background: white;\n    border-radius: 5px;\n    overflow: hidden;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    font-family: sans-serif;\n`;\n\n/**\n * Description\n */\n\nexport const Description = styled.div`\n    padding: 30px 20px;\n    text-align: center;\n\n    > * {\n        margin-bottom: 0;\n    }\n`;\n\nexport const Avatar = styled.img`\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n`;\n\nexport const Name = styled.p`\n    margin-top: 23px;\n    font-size: 19px;\n    color: var(--color-big-stone);\n`;\n\nexport const Tag = styled.p`\n    margin-top: 9px;\n    font-size: 12px;\n    color: var(--color-regent-gray);\n`;\n\nexport const Location = styled.p`\n    margin-top: 12px;\n    font-size: 13px;\n    color: var(--color-regent-gray);\n`;\n\n/**\n * Stats\n */\n\nexport const StatsList = styled.ul`\n    display: flex;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    border-top: 1px solid var(--color-mystic);\n`;\n\nexport const StatsItem = styled.li`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    background: #f3f6f9;\n    border-right: 1px solid var(--color-mystic);\n\n    &:last-child {\n        border-right: none;\n    }\n`;\n\nexport const Label = styled.span`\n    font-size: 12px;\n    color: var(--color-regent-gray);\n`;\n\nexport const Quantity = styled.span`\n    margin-top: 4px;\n    font-size: 16px;\n    color: var(--color-big-stone);\n    font-weight: bold;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { User } from '../user-api/UserAPI';\nimport {\n    Profile,\n    Description,\n    Avatar,\n    Name,\n    Tag,\n    Location,\n    StatsList,\n    StatsItem,\n    Label,\n    Quantity,\n} from './UserProfile.sc';\n\ntype UserProfileProps = User;\n\nexport const UserProfile: React.FC<UserProfileProps> = ({\n    name,\n    tag,\n    location,\n    avatar,\n    stats: { followers, views, likes },\n}) => {\n    return (\n        <Profile>\n            <Description>\n                <Avatar src={avatar} alt={name} />\n                <Name>{name}</Name>\n                <Tag>@{tag}</Tag>\n                <Location>{location}</Location>\n            </Description>\n\n            <StatsList>\n                <StatsItem>\n                    <Label>Followers</Label>\n                    <Quantity>{followers}</Quantity>\n                </StatsItem>\n                <StatsItem>\n                    <Label>Views</Label>\n                    <Quantity>{views}</Quantity>\n                </StatsItem>\n                <StatsItem>\n                    <Label>Likes</Label>\n                    <Quantity>{likes}</Quantity>\n                </StatsItem>\n            </StatsList>\n        </Profile>\n    );\n};\n\nUserProfile.propTypes = {\n    name: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    stats: PropTypes.shape({\n        followers: PropTypes.number.isRequired,\n        views: PropTypes.number.isRequired,\n        likes: PropTypes.number.isRequired,\n    }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MainHeading = styled.h1`\n    margin: 0;\n    font-size: 24px;\n`;\n\nexport const MainSection = styled.section``;\n\nexport const Main = styled.main`\n    width: 768px;\n    margin: 0 auto;\n    padding-top: 60px;\n    padding-bottom: 60px;\n\n    > ${MainSection} {\n        margin-top: 50px;\n\n        & + & {\n            margin-top: 40px;\n        }\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const MainSectionHeading = styled.h2`\n    margin: 0;\n    font-size: 20px;\n`;\n\nexport const MainSectionContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    padding: 20px;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    border-radius: 2px;\n    background: ${({ bg }): string => bg || '#ffffff'};\n`;\n","import React, { useEffect, useState } from 'react';\nimport { User, userAPI } from './user-api/UserAPI';\nimport { UserProfile } from './UserProfile';\nimport { MainSection, MainSectionContent, MainSectionHeading } from '../Main.sc';\n\nexport const UserSection: React.FC = () => {\n    const [user, setUser] = useState<User>();\n\n    useEffect(() => {\n        const getRandomUser = async (): Promise<void> => {\n            const userData = await userAPI.getRandomUser();\n\n            setUser(userData);\n        };\n\n        getRandomUser();\n    }, []);\n\n    return (\n        <MainSection>\n            <MainSectionHeading>Social profile</MainSectionHeading>\n\n            <MainSectionContent bg=\"#e7ebf1\">\n                {user && (\n                    <UserProfile\n                        avatar={user.avatar}\n                        location={user.location}\n                        name={user.name}\n                        stats={user.stats}\n                        tag={user.tag}\n                    />\n                )}\n            </MainSectionContent>\n        </MainSection>\n    );\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { mockStatsAPI } from './mockStatsAPI';\n\nexport type StatsRecord = {\n    id: string;\n    label: string;\n    percentage: number;\n};\n\nexport class StatsAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getStats(): Promise<StatsRecord[]> {\n        const {\n            data: { stats },\n        } = await this.httpClient.get('/stats');\n\n        return stats;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nmockStatsAPI(axiosInstance);\n\nexport const statsAPI = new StatsAPI(axiosInstance);\n","import { AxiosInstance } from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport stats from './stub-stats.json';\n\nexport const mockStatsAPI = (axiosInstance: AxiosInstance): void => {\n    const mockAdapter = new MockAdapter(axiosInstance);\n\n    mockAdapter.onGet('/stats').reply(200, { stats });\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n    --color-white: #ffffff;\n    --color-river-bed: #475965;\n\n    width: 268px;\n    font-family: sans-serif;\n    background: var(--color-white);\n`;\n\nexport const Heading = styled.h2`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 70px;\n    margin: 0;\n    font-size: 16px;\n    color: var(--color-river-bed);\n    text-transform: uppercase;\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    overflow-x: scroll;\n    margin: 0;\n    padding: 0;\n    color: var(--color-white);\n\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-width: 67px;\n    flex-grow: 1;\n    flex-shrink: 0;\n    height: 60px;\n    background: ${() => `#${Math.floor(Math.random() * (2 ** 24 - 1)).toString(16)}`};\n`;\n\nexport const Value = styled.span`\n    font-size: 18px;\n`;\n\nexport const Label = styled.span`\n    font-size: 12px;\n\n    & + ${Value} {\n        margin-top: 6px;\n    }\n`;\n","import React from 'react';\nimport { Heading, Item, Label, List, Value, Wrapper } from './Stats.sc';\nimport { StatsRecord } from '../stats-api/StatsAPI';\n\nexport type StatsProps = {\n    title?: string;\n    stats: StatsRecord[];\n};\n\nexport const Stats: React.FC<StatsProps> = ({ title, stats }) => {\n    return (\n        <Wrapper>\n            {title && <Heading>{title}</Heading>}\n            <List>\n                {stats.map(({ id, label, percentage }) => (\n                    <Item key={id}>\n                        <Label>{label}</Label>\n                        <Value>{percentage}</Value>\n                    </Item>\n                ))}\n            </List>\n        </Wrapper>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { StatsRecord, statsAPI } from './stats-api/StatsAPI';\nimport { Stats } from './Stats';\nimport { MainSection, MainSectionContent, MainSectionHeading } from '../Main.sc';\n\nexport const StatsSection: React.FC = () => {\n    const [stats, setStats] = useState<StatsRecord[]>();\n\n    useEffect(() => {\n        const getStats = async (): Promise<void> => {\n            const statsList = await statsAPI.getStats();\n\n            setStats(statsList);\n        };\n\n        getStats();\n    }, []);\n\n    return (\n        <MainSection>\n            <MainSectionHeading>Statistics</MainSectionHeading>\n\n            <MainSectionContent bg=\"#eff3f6\">\n                {stats && <Stats title=\"Upload stats\" stats={stats} />}\n            </MainSectionContent>\n        </MainSection>\n    );\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { mockFriendsAPI } from './mockFriendsAPI';\n\nexport type FriendRecord = {\n    id: string;\n    avatar: string;\n    name: string;\n    isOnline: boolean;\n};\n\nexport class FriendsAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getFriends(): Promise<FriendRecord[]> {\n        const {\n            data: { friends },\n        } = await this.httpClient.get('/friends');\n\n        return friends;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nmockFriendsAPI(axiosInstance);\n\nexport const friendsAPI = new FriendsAPI(axiosInstance);\n","import { AxiosInstance } from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport friends from './stub-friends.json';\n\nexport const mockFriendsAPI = (axiosInstance: AxiosInstance): void => {\n    const mockAdapter = new MockAdapter(axiosInstance);\n\n    mockAdapter.onGet('/friends').reply(200, { friends });\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n    --color-white: #ffffff;\n    --color-black: #000000;\n    --color-cucumber: #76ab5c;\n    --color-flame: #d65643;\n\n    width: 400px;\n    font-family: sans-serif;\n    background: var(--color-white);\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n    margin: 0;\n    max-height: 400px;\n    padding: 10px;\n    color: var(--color-white);\n\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    align-items: center;\n    flex-shrink: 0;\n    margin-top: 15px;\n    padding: 8px 15px;\n    color: var(--color-black);\n    box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.75);\n\n    &:first-child {\n        margin-top: 0;\n    }\n`;\n\nexport const Status = styled.span`\n    width: 25px;\n    height: 25px;\n    background: ${({ isOnline }): string => (isOnline ? 'var(--color-cucumber)' : 'var(--color-flame)')};\n    border-radius: 50%;\n`;\n\nexport const Avatar = styled.img`\n    width: 100px;\n    height: 100px;\n    margin-left: 15px;\n    border-radius: 10px;\n`;\n\nexport const Name = styled.p`\n    margin: 0 0 0 20px;\n    font-size: 32px;\n`;\n","import React from 'react';\nimport { Avatar, Name, Status, Wrapper, Item, List } from './Friends.sc';\n\nexport const Friends: React.FC<any> = ({ friends }) => {\n    return (\n        <Wrapper>\n            <List>\n                {friends.map(({ id, avatar, name, isOnline }) => (\n                    <Item key={id}>\n                        <Status isOnline={isOnline} />\n                        <Avatar src={avatar} alt={name} />\n                        <Name>{name}</Name>\n                    </Item>\n                ))}\n            </List>\n        </Wrapper>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { FriendRecord, friendsAPI } from './friends-api/FriendsAPI';\nimport { Friends } from './Friends';\nimport { MainSection, MainSectionContent, MainSectionHeading } from '../Main.sc';\n\nexport const FriendsSection: React.FC = () => {\n    const [friends, setFriends] = useState<FriendRecord[]>();\n\n    useEffect(() => {\n        const getFriends = async (): Promise<void> => {\n            const friendsList = await friendsAPI.getFriends();\n\n            setFriends(friendsList);\n        };\n\n        getFriends();\n    }, []);\n\n    return (\n        <MainSection>\n            <MainSectionHeading>Friends list</MainSectionHeading>\n\n            <MainSectionContent bg=\"#ffffff\">{friends && <Friends friends={friends} />}</MainSectionContent>\n        </MainSection>\n    );\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { mockTransactionsAPI } from './mockTransactionsAPI';\n\nexport type TransactionRecord = {\n    id: string;\n    type: string;\n    amount: string;\n    currency: string;\n};\n\nexport class TransactionsAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async getTransactions(): Promise<TransactionRecord[]> {\n        const {\n            data: { transactions },\n        } = await this.httpClient.get('/transactions');\n\n        return transactions;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nmockTransactionsAPI(axiosInstance);\n\nexport const transactionsAPI = new TransactionsAPI(axiosInstance);\n","import { AxiosInstance } from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport transactions from './stub-transactions.json';\n\nexport const mockTransactionsAPI = (axiosInstance: AxiosInstance): void => {\n    const mockAdapter = new MockAdapter(axiosInstance);\n\n    mockAdapter.onGet('/transactions').reply(200, { transactions });\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n    --color-white: #ffffff;\n    --color-egg-blue: #00bcd4;\n    --color-mystic: #ecf2f3;\n    --color-shuttle-gray: #5c6975;\n    --color-geyser: #e0e6e7;\n\n    width: 100%;\n    text-align: center;\n    font-family: sans-serif;\n    background: var(--color-white);\n    border-radius: 3px;\n    overflow: hidden;\n    table-layout: fixed;\n    border-collapse: collapse;\n    border-spacing: 0;\n    box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.25);\n\n    tr {\n        height: 50px;\n    }\n\n    th,\n    td {\n        border-right: thin solid var(--color-geyser);\n\n        &:last-child {\n            border-right: none;\n        }\n    }\n\n    thead tr {\n        color: var(--color-white);\n        font-size: 13px;\n        text-transform: uppercase;\n        background: var(--color-egg-blue);\n    }\n\n    tbody tr {\n        font-weight: 100;\n        color: var(--color-shuttle-gray);\n\n        td:first-child {\n            text-transform: capitalize;\n        }\n\n        &:nth-child(even) {\n            background: var(--color-mystic);\n        }\n    }\n`;\n","import React from 'react';\nimport { Table } from './Transactions.sc';\nimport { TransactionRecord } from '../transactions-api/TransactionsAPI';\n\ntype TransactionsProps = {\n    items: TransactionRecord[];\n};\n\nexport const Transactions: React.FC<TransactionsProps> = ({ items }) => {\n    return (\n        <Table>\n            <thead>\n                <tr>\n                    <th>Type</th>\n                    <th>Amount</th>\n                    <th>Currency</th>\n                </tr>\n            </thead>\n\n            <tbody>\n                {items.map(({ id, type, amount, currency }) => (\n                    <tr key={id}>\n                        <td>{type}</td>\n                        <td>{amount}</td>\n                        <td>{currency}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { TransactionRecord, transactionsAPI } from './transactions-api/TransactionsAPI';\nimport { Transactions } from './Transactions';\nimport { MainSection, MainSectionContent, MainSectionHeading } from '../Main.sc';\n\nexport const TransactionsSection: React.FC = () => {\n    const [transactions, setTransactions] = useState<TransactionRecord[]>();\n\n    useEffect(() => {\n        const getTransactions = async (): Promise<void> => {\n            const transactionsList = await transactionsAPI.getTransactions();\n\n            setTransactions(transactionsList);\n        };\n\n        getTransactions();\n    }, []);\n\n    return (\n        <MainSection>\n            <MainSectionHeading>Transactions history</MainSectionHeading>\n\n            <MainSectionContent bg=\"#ffffff\">\n                {transactions && <Transactions items={transactions} />}\n            </MainSectionContent>\n        </MainSection>\n    );\n};\n","import React from 'react';\nimport { UserSection } from '../Main/UserSection';\nimport { Main, MainHeading } from '../Main';\nimport { StatsSection } from '../Main/StatsSection/StatsSection';\nimport { FriendsSection } from '../Main/FriendsSection/FriendsSection';\nimport { TransactionsSection } from '../Main/TransactionsSection';\n\nexport const App: React.FC = () => {\n    return (\n        <Main>\n            <MainHeading>Homework 01 – Components</MainHeading>\n            <UserSection />\n            <StatsSection />\n            <FriendsSection />\n            <TransactionsSection />\n        </Main>\n    );\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}